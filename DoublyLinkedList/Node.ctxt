#BlueJ class context
comment0.target=Node
comment0.text=\n\ Node\ class\ for\ a\ doubly\ linked\ list.\n\n\ @author\ Jonny\ Tang\n\ @version\ 9/18/2025\n
comment1.params=value\ next
comment1.target=Node(int,\ Node)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Node\n\ \n\ @param\ value\ \ the\ value\ you\ are\ initializing\ it\ to\n\ @param\ next\ \ the\ next\ node\ that\ you\ are\ initializing\ to\n
comment10.params=
comment10.target=Node\ getStart()
comment10.text=\n\ This\ method\ returns\ the\ start\ of\ this\ linked\ list\n\n\ @return\ \ \ \ the\ start\ of\ the\ linked\ list\n
comment11.params=
comment11.target=void\ traverseForward()
comment11.text=\n\ This\ method\ traverses\ forward\ through\ the\ linked\ list\ with\ recursion\n
comment12.params=
comment12.target=void\ traverseBackward()
comment12.text=\n\ This\ method\ traverses\ backward\ through\ the\ linked\ list\ with\ recursion\n
comment13.params=
comment13.target=void\ traverseBackwardHelper()
comment13.text=\n\ This\ method\ is\ the\ helper\ class\ to\ traverse\ backward\ through\ the\ linked\ list\ with\ recursion\n
comment14.params=v
comment14.target=void\ addToEnd(int)
comment14.text=\n\ This\ method\ adds\ a\ node\ to\ the\ end\ of\ the\ linked\ list\n\n\ @param\ \ \ v\ \ the\ value\ getting\ added\ to\ the\ end\n
comment15.params=v
comment15.target=Node\ addToStart(int)
comment15.text=\n\ This\ method\ adds\ a\ node\ to\ the\ start\ of\ the\ linked\ list\n\n\ @param\ \ \ v\ \ the\ value\ getting\ added\ to\ the\ front\n\ @return\ \ \ \ the\ pointer\ to\ the\ new\ first\ node\n
comment16.params=givenVal\ v
comment16.target=void\ addAfterValue(int,\ int)
comment16.text=\n\ This\ method\ adds\ a\ node\ after\ a\ given\ value,\ or\ at\ the\ end\ if\ the\ value\ doesn't\ exist.\n\n\ @param\ \ \ givenVal\ \ the\ value\ that\ which\ val\ is\ getting\ addded\ after\n\ @param\ \ \ v\ \ the\ value\ getting\ added\n
comment17.params=
comment17.target=Node\ reverse()
comment17.text=\n\ This\ method\ reverses\ the\ linked\ list\n\n\ @return\ the\ pointer\ to\ the\ new\ start\ node\n
comment18.params=
comment18.target=Node\ reverseHelper()
comment18.text=\n\ This\ method\ is\ the\ helper\ to\ reverses\ the\ linked\ list\n\n\ @return\ the\ current\ node\ in\ the\ list\ thats\ getting\ reverse\n
comment19.params=s
comment19.target=int\ size(int)
comment2.params=
comment2.target=void\ setPrevs()
comment2.text=\n\ This\ method\ sets\ all\ the\ prevs\ to\ the\ right\ thing\n
comment20.params=prevValue
comment20.target=boolean\ checkSorted(int)
comment20.text=\ Sort\ with\ while\ loops;\ merge\ sort\n\ \n
comment3.params=
comment3.target=int\ value()
comment3.text=\n\ This\ method\ is\ a\ getter\ for\ value\n\n\ @return\ \ \ \ the\ value\ integer\n
comment4.params=
comment4.target=Node\ next()
comment4.text=\n\ This\ method\ is\ a\ getter\ for\ next\n\n\ @return\ \ \ \ next\ variable\n
comment5.params=
comment5.target=Node\ prev()
comment5.text=\n\ This\ method\ is\ a\ getter\ for\ prev\n\n\ @return\ \ \ \ prev\ variable\n
comment6.params=newValue
comment6.target=void\ setValue(int)
comment6.text=\n\ This\ method\ is\ a\ setter\ for\ value\n\n\ @param\ \ newValue\ \ the\ new\ value\ that\ you\ are\ setting\ it\ to\n
comment7.params=newNext
comment7.target=void\ setNext(Node)
comment7.text=\n\ This\ method\ is\ a\ setter\ for\ next\n\n\ @param\ \ newNext\ \ the\ new\ next\ that\ you\ are\ setting\ it\ to\n
comment8.params=newPrev
comment8.target=void\ setPrev(Node)
comment8.text=\n\ This\ method\ is\ a\ setter\ for\ next\n\n\ @param\ \ newPrev\ \ \ the\ new\ prev\ that\ you\ are\ setting\ it\ to\n
comment9.params=
comment9.target=Node\ getEnd()
comment9.text=\n\ This\ method\ returns\ the\ end\ of\ this\ linked\ list\n\n\ @return\ \ \ \ the\ end\ of\ the\ linked\ list\n
numComments=21
